// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecordBookAPI.DataContext;

namespace RecordBookAPI.Migrations
{
    [DbContext(typeof(RecordBookContext))]
    [Migration("20210327151359_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RecordBookAPI.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Name_unique")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Discipline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Name_unique")
                        .IsUnique()
                        .HasDatabaseName("Name_unique1");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("RecordBookAPI.Models.ExamBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("Discipline_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<long>("ExamType_id")
                        .HasColumnType("bigint");

                    b.Property<long>("Student_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Discipline_id");

                    b.HasIndex("ExamType_id");

                    b.HasIndex("Student_id");

                    b.ToTable("Exam_Books");
                });

            modelBuilder.Entity("RecordBookAPI.Models.ExamType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "Name_unique")
                        .IsUnique()
                        .HasDatabaseName("Name_unique2");

                    b.ToTable("Exam_Types");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Department_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Department_id");

                    b.HasIndex(new[] { "Name" }, "Name_unique")
                        .IsUnique()
                        .HasDatabaseName("Name_unique3");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateOfEducation")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Group_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Group_id");

                    b.HasIndex(new[] { "CertificateOfEducation" }, "CertificateOfEducation_unique")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("RecordBookAPI.Models.ExamBook", b =>
                {
                    b.HasOne("RecordBookAPI.Models.Discipline", "Discipline")
                        .WithMany("ExamBooks")
                        .HasForeignKey("Discipline_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecordBookAPI.Models.ExamType", "ExamType")
                        .WithMany("ExamBooks")
                        .HasForeignKey("ExamType_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecordBookAPI.Models.Student", "Student")
                        .WithMany("ExamBooks")
                        .HasForeignKey("Student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("ExamType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Group", b =>
                {
                    b.HasOne("RecordBookAPI.Models.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Student", b =>
                {
                    b.HasOne("RecordBookAPI.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("Group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Department", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Discipline", b =>
                {
                    b.Navigation("ExamBooks");
                });

            modelBuilder.Entity("RecordBookAPI.Models.ExamType", b =>
                {
                    b.Navigation("ExamBooks");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("RecordBookAPI.Models.Student", b =>
                {
                    b.Navigation("ExamBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
